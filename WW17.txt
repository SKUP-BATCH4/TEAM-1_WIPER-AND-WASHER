/*
 * File:   cann.c
 * Author: User
 *
 * Created on October 12, 2022, 4:59 PM
 */
// PIC18F458 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H

// PIC18F458 Configuration Bit Settings

// 'C' source line config statements

// CONFIG1H
#pragma config OSC = HS         // Oscillator Selection bits (HS oscillator)
#pragma config OSCS = OFF       // Oscillator System Clock Switch Enable bit (Oscillator system clock switch option is disabled (main oscillator is source))

// CONFIG2L
#pragma config PWRT = OFF       // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOR = OFF        // Brown-out Reset Enable bit (Brown-out Reset disabled)
#pragma config BORV = 25        // Brown-out Reset Voltage bits (VBOR set to 2.5V)

// CONFIG2H
#pragma config WDT = OFF        // Watchdog Timer Enable bit (WDT disabled (control is placed on the SWDTEN bit))
#pragma config WDTPS = 128      // Watchdog Timer Postscale Select bits (1:128)

// CONFIG4L
#pragma config STVR = OFF       // Stack Full/Underflow Reset Enable bit (Stack Full/Underflow will not cause Reset)
#pragma config LVP = OFF        // Low-Voltage ICSP Enable bit (Low-Voltage ICSP disabled)

// CONFIG5L
#pragma config CP0 = OFF        // Code Protection bit (Block 0 (000200-001FFFh) not code protected)
#pragma config CP1 = OFF        // Code Protection bit (Block 1 (002000-003FFFh) not code protected)
#pragma config CP2 = OFF        // Code Protection bit (Block 2 (004000-005FFFh) not code protected)
#pragma config CP3 = OFF        // Code Protection bit (Block 3 (006000-007FFFh) not code protected)

// CONFIG5H
#pragma config CPB = OFF        // Boot Block Code Protection bit (Boot Block (000000-0001FFh) not code protected)
#pragma config CPD = OFF        // Data EEPROM Code Protection bit (Data EEPROM not code protected)

// CONFIG6L
#pragma config WRT0 = OFF       // Write Protection bit (Block 0 (000200-001FFFh) not write protected)
#pragma config WRT1 = OFF       // Write Protection bit (Block 1 (002000-003FFFh) not write protected)
#pragma config WRT2 = OFF       // Write Protection bit (Block 2 (004000-005FFFh) not write protected)
#pragma config WRT3 = OFF       // Write Protection bit (Block 3 (006000-007FFFh) not write protected)

// CONFIG6H
#pragma config WRTC = OFF       // Configuration Register Write Protection bit (Configuration registers (300000-3000FFh) not write protected)
#pragma config WRTB = OFF       // Boot Block Write Protection bit (Boot Block (000000-0001FFh) not write protected)
#pragma config WRTD = OFF       // Data EEPROM Write Protection bit (Data EEPROM not write protected)

// CONFIG7L
#pragma config EBTR0 = OFF      // Table Read Protection bit (Block 0 (000200-001FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR1 = OFF      // Table Read Protection bit (Block 1 (002000-003FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR2 = OFF      // Table Read Protection bit (Block 2 (004000-005FFFh) not protected from Table Reads executed in other blocks)
#pragma config EBTR3 = OFF      // Table Read Protection bit (Block 3 (006000-007FFFh) not protected from Table Reads executed in other blocks)

// CONFIG7H
#pragma config EBTRB = OFF      // Boot Block Table Read Protection bit (Boot Block (000000-0001FFh) not protected from Table Reads executed in other blocks)

// #pragma config statements should precede project file includes.
// Use project enums instead of #define for ON and OFF.

#include <xc.h>
#include "cann.c"
#define _XTAL_FREQ 20000000
//unsigned int sysini();
unsigned int canrecv();
//unsigned int canini();
//unsigned int cantr();
unsigned int msg0;
unsigned int msg1;
unsigned int msg2;
unsigned int eepromwrite(unsigned char ,unsigned char);
unsigned int read(unsigned int);
//extern void cantrs(unsigned int);

unsigned int sysini()
{
    INTCONbits.GIE=1;
    INTCONbits.PEIE=1;    
}
unsigned int canini()
{
    TRISBbits.RB2=0;
    TRISBbits.RB3=1;
    CANCON=0x80;
    while(CANSTAT!=0x00)
    {
        BRGCON1=0xC1;
        BRGCON2=0xAE;
        BRGCON3=0x45;
        CIOCON=0x20;
        CANCON=0x00;
    }
    
}
unsigned int mask()
{
    RXM0SIDH=0x14;
    RXM0SIDL=0x00;
}
unsigned int filter()
{
    RXF0SIDH=0x14;
    RXF0SIDL=0x00;
}
unsigned int canrecv()
{
    CANCON=0x00;
    //0x701
    RXB0SIDH=0xF0;
    RXB0SIDL=0x20;
    RXB0DLC=0x03;
    msg0=RXB0D0;
    msg1=RXB0D1;
    msg2=RXB0D2;
    mask();
    filter();
    eepromwrite(msg0,0xAA);
    eepromwrite(msg1,0xAB);
    eepromwrite(0x45,0xAC);
    RXB0CONbits.RXM0 = 0x01;
    RXB0CONbits.RXFUL=0;
    //cantrs(msg0);
}
unsigned int eepromwrite(unsigned char data,unsigned char address)
{
    EEADR=address;
    EEDATA =data;
    EECON1bits.EEPGD=0;
    EECON1bits.CFGS=0;
    EECON1bits.WREN=1;
    INTCONbits.GIE=0;
    EECON2=0x55;
    EECON2=0xAA;
    
    EECON1bits.WR=1;
    INTCONbits.GIE=1;
    
    while(PIR2bits.EEIF==0);
    PIR2bits.EEIF=0;
    
}
    

unsigned int eepromread(unsigned char address)
{
   
    EEADR = address;
    EECON1bits.EEPGD=0;
    EECON1bits.CFGS=0;
    EECON1bits.RD=1;
    return EEDATA;
 
}
unsigned int cantr()
{
    CANCON=0x00;
    //0x701
    TXB0SIDH=0xF0;
    TXB0SIDL=0x20;
    TXB0DLC=0x03;
    TXB0D0=eepromread(0xAA);
    TXB0D1=eepromread(0xAB);
    TXB0D2=eepromread(0xAC);
//    TXB0D0=0xAA;
//    TXB0D1=0xAB;
//    TXB0D2=0xAC;
    
    TXB0CONbits.TXREQ=1;
}
void sw3()
{
    TRISBbits.RB0=0;
    TRISAbits.RA0=0;
    TRISAbits.RA1=0;
    if(PORTBbits.RB0==0)
    {
        canrecv();
        
        LATAbits.LA1=1;
    }
    else if(PORTBbits.RB0==1)
    {
      LATAbits.LA1=0;  
    }
            
}
void main() {
    sysini();
    canini();
    sw3();
    //canrecv();
    cantr();
}